# Generated by Django 5.0.1 on 2025-07-15 07:07

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('data_management', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('clinician_id', models.IntegerField()),
                ('clinician_name', models.CharField(max_length=255)),
                ('appointment_date', models.DateTimeField()),
                ('duration_minutes', models.IntegerField(default=30)),
                ('status', models.CharField(choices=[('SCHEDULED', 'Scheduled'), ('CONFIRMED', 'Confirmed'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('NO_SHOW', 'No Show')], default='SCHEDULED', max_length=20)),
                ('reason', models.TextField()),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'appointments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('clinician_id', models.IntegerField()),
                ('clinician_name', models.CharField(max_length=255)),
                ('record_type', models.CharField(choices=[('CONSULTATION', 'Consultation'), ('LAB_RESULT', 'Lab Result'), ('PRESCRIPTION', 'Prescription'), ('IMAGING', 'Imaging'), ('PROCEDURE', 'Procedure'), ('VACCINATION', 'Vaccination')], max_length=20)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('diagnosis', models.TextField(blank=True)),
                ('treatment', models.TextField(blank=True)),
                ('attachments', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'medical_records',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('clinician_id', models.IntegerField()),
                ('clinician_name', models.CharField(max_length=255)),
                ('medication_name', models.CharField(max_length=255)),
                ('dosage', models.CharField(max_length=100)),
                ('frequency', models.CharField(max_length=100)),
                ('duration', models.CharField(max_length=100)),
                ('instructions', models.TextField()),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'prescriptions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChunkEmbedding',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('embedding_model', models.CharField(max_length=100)),
                ('embedding_version', models.CharField(max_length=50)),
                ('embedding_vector', models.JSONField()),
                ('vector_dimension', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'chunk_embeddings',
            },
        ),
        migrations.CreateModel(
            name='DocumentChunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('chunk_index', models.IntegerField()),
                ('chunk_text', models.TextField()),
                ('chunk_size', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'document_chunks',
                'ordering': ['rag_document', 'chunk_index'],
            },
        ),
        migrations.CreateModel(
            name='EmbeddingProcessingLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('job_id', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('progress', models.IntegerField(default=0)),
                ('total_chunks', models.IntegerField(blank=True, null=True)),
                ('processed_chunks', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('processing_time', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'embedding_processing_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.RenameIndex(
            model_name='cancertype',
            new_name='cancer_type_cancer__c001ef_idx',
            old_name='cancer_typ_cancer__c3ac95_idx',
        ),
        migrations.RenameIndex(
            model_name='cancertype',
            new_name='cancer_type_parent__754e20_idx',
            old_name='cancer_typ_parent__0861cc_idx',
        ),
        migrations.RenameIndex(
            model_name='eventlog',
            new_name='event_logs_event_t_d63704_idx',
            old_name='event_logs_event_t_4c8d8e_idx',
        ),
        migrations.RenameIndex(
            model_name='eventlog',
            new_name='event_logs_service_e76474_idx',
            old_name='event_logs_service_31a8f2_idx',
        ),
        migrations.RenameIndex(
            model_name='eventlog',
            new_name='event_logs_created_87c40d_idx',
            old_name='event_logs_created_0c8e5e_idx',
        ),
        migrations.AlterField(
            model_name='user',
            name='password',
            field=models.CharField(max_length=128),
        ),
        migrations.AddField(
            model_name='documentchunk',
            name='rag_document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='data_management.ragdocument'),
        ),
        migrations.AddField(
            model_name='chunkembedding',
            name='chunk',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding', to='data_management.documentchunk'),
        ),
        migrations.AddField(
            model_name='embeddingprocessinglog',
            name='rag_document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processing_logs', to='data_management.ragdocument'),
        ),
        migrations.AddField(
            model_name='embeddingprocessinglog',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='documentchunk',
            index=models.Index(fields=['rag_document', 'chunk_index'], name='document_ch_rag_doc_7b1592_idx'),
        ),
        migrations.AddIndex(
            model_name='documentchunk',
            index=models.Index(fields=['last_accessed'], name='document_ch_last_ac_07cd5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='documentchunk',
            unique_together={('rag_document', 'chunk_index')},
        ),
        migrations.AddIndex(
            model_name='chunkembedding',
            index=models.Index(fields=['chunk'], name='chunk_embed_chunk_i_57f8dd_idx'),
        ),
        migrations.AddIndex(
            model_name='chunkembedding',
            index=models.Index(fields=['embedding_model'], name='chunk_embed_embeddi_88d9e0_idx'),
        ),
        migrations.AddIndex(
            model_name='chunkembedding',
            index=models.Index(fields=['created_at'], name='chunk_embed_created_1f94e7_idx'),
        ),
        migrations.AddIndex(
            model_name='embeddingprocessinglog',
            index=models.Index(fields=['rag_document'], name='embedding_p_rag_doc_194c1d_idx'),
        ),
        migrations.AddIndex(
            model_name='embeddingprocessinglog',
            index=models.Index(fields=['user'], name='embedding_p_user_id_24df1b_idx'),
        ),
        migrations.AddIndex(
            model_name='embeddingprocessinglog',
            index=models.Index(fields=['status'], name='embedding_p_status_e40939_idx'),
        ),
        migrations.AddIndex(
            model_name='embeddingprocessinglog',
            index=models.Index(fields=['job_id'], name='embedding_p_job_id_41acdd_idx'),
        ),
        migrations.AddIndex(
            model_name='embeddingprocessinglog',
            index=models.Index(fields=['-created_at'], name='embedding_p_created_10900a_idx'),
        ),
    ]
