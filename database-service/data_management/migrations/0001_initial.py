# Generated by Django 5.0.1

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Language',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('native_name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'languages',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20, unique=True)),
                ('display_name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('role', models.ForeignKey(db_column='role_id', on_delete=django.db.models.deletion.PROTECT, related_name='users', to='data_management.role')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='FileMetadata',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('filename', models.CharField(max_length=255)),
                ('file_hash', models.CharField(db_index=True, max_length=64)),
                ('file_size', models.BigIntegerField()),
                ('mime_type', models.CharField(max_length=100)),
                ('storage_path', models.CharField(max_length=500)),
                ('is_encrypted', models.BooleanField(default=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='files', to='data_management.user')),
            ],
            options={
                'db_table': 'file_metadata',
                'ordering': ['-uploaded_at'],
                'indexes': [
                    models.Index(fields=['user', '-uploaded_at'], name='file_metada_user_id_079911_idx'),
                    models.Index(fields=['file_hash'], name='file_metada_file_ha_ae2673_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='EventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(max_length=100)),
                ('service', models.CharField(max_length=50)),
                ('data', models.JSONField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'event_logs',
                'indexes': [
                    models.Index(fields=['event_type'], name='event_logs_event_t_4c8d8e_idx'),
                    models.Index(fields=['service'], name='event_logs_service_31a8f2_idx'),
                    models.Index(fields=['created_at'], name='event_logs_created_0c8e5e_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='CancerType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cancer_type', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subtypes', to='data_management.cancertype')),
            ],
            options={
                'db_table': 'cancer_types',
                'indexes': [
                    models.Index(fields=['cancer_type'], name='cancer_typ_cancer__c3ac95_idx'),
                    models.Index(fields=['parent'], name='cancer_typ_parent__0861cc_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='UserEncryptionKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rotated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='encryption_key', to='data_management.user')),
            ],
            options={
                'db_table': 'user_encryption_keys',
            },
        ),
        migrations.CreateModel(
            name='RefreshToken',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.CharField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(db_column='user_id', on_delete=django.db.models.deletion.CASCADE, related_name='refresh_tokens', to='data_management.user')),
            ],
            options={
                'db_table': 'refresh_tokens',
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField(db_index=True, unique=True)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('OTHER', 'Other')], max_length=10)),
                ('phone_number', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('emergency_contact_name', models.CharField(max_length=255)),
                ('emergency_contact_phone', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('preferred_language', models.ForeignKey(blank=True, db_column='preferred_language_id', null=True, on_delete=django.db.models.deletion.SET_NULL, to='data_management.language')),
            ],
            options={
                'db_table': 'patients',
            },
        ),
        migrations.CreateModel(
            name='FileAccessLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('access_type', models.CharField(choices=[('upload', 'Upload'), ('download', 'Download'), ('delete', 'Delete'), ('view', 'View')], max_length=20)),
                ('accessed_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.CharField(blank=True, max_length=500, null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_logs', to='data_management.filemetadata')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='data_management.user')),
            ],
            options={
                'db_table': 'file_access_logs',
                'ordering': ['-accessed_at'],
                'indexes': [
                    models.Index(fields=['file', '-accessed_at'], name='file_access_file_id_ed8ffc_idx'),
                    models.Index(fields=['user', '-accessed_at'], name='file_access_user_id_aa8b89_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='RAGDocument',
            fields=[
                ('file', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='rag_document', serialize=False, to='data_management.filemetadata')),
                ('cancer_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='data_management.cancertype')),
            ],
            options={
                'db_table': 'rag_documents',
                'indexes': [
                    models.Index(fields=['cancer_type'], name='rag_documen_cancer__860c4e_idx'),
                ],
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('user', 'User'), ('assistant', 'Assistant')], max_length=10)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'chat_messages',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='New Chat', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('suggestions', models.JSONField(blank=True, default=list)),
            ],
            options={
                'db_table': 'chat_sessions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='chatsession',
            name='patient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='data_management.patient'),
        ),
        migrations.AddField(
            model_name='chatmessage',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='data_management.chatsession'),
        ),   
        migrations.RunPython(
            code=lambda apps, schema_editor: populate_initial_data(apps, schema_editor),
            reverse_code=migrations.RunPython.noop,
        ),
    ]


def populate_initial_data(apps, schema_editor):
    """Populate initial data for roles and languages"""
    Role = apps.get_model('data_management', 'Role')
    Language = apps.get_model('data_management', 'Language')
    
    # Check if roles already exist before creating
    if not Role.objects.exists():
        roles = [
            {'name': 'PATIENT', 'display_name': 'Patient', 'description': 'Patient users who can view their medical records and book appointments'},
            {'name': 'CLINICIAN', 'display_name': 'Clinician', 'description': 'Healthcare providers who can manage patient records and appointments'},
            {'name': 'ADMIN', 'display_name': 'Administrator', 'description': 'System administrators with full access to all features'},
        ]
        for role_data in roles:
            Role.objects.create(**role_data)
    
    # Check if languages already exist before creating
    if not Language.objects.exists():
        languages = [
            {'code': 'en', 'name': 'English', 'native_name': 'English', 'is_active': True, 'display_order': 1},
            {'code': 'ar', 'name': 'Arabic', 'native_name': 'العربية', 'is_active': True, 'display_order': 2},
            {'code': 'zh', 'name': 'Chinese', 'native_name': '中文', 'is_active': True, 'display_order': 3},
            {'code': 'fr', 'name': 'French', 'native_name': 'Français', 'is_active': True, 'display_order': 4},
            {'code': 'hi', 'name': 'Hindi', 'native_name': 'हिन्दी', 'is_active': True, 'display_order': 5},
            {'code': 'es', 'name': 'Spanish', 'native_name': 'Español', 'is_active': True, 'display_order': 6},
        ]
        for lang_data in languages:
            Language.objects.create(**lang_data)